{"name": "test_fail_login[错误的用户]", "status": "broken", "statusDetails": {"message": "Exception: 请求错误", "trace": "self = <commont.configHttp.HttpClient object at 0x00000243F3E29C08>, name = 'login', data = {'password': '123456', 'username': 'ceshi'}\n\n    def send_post(self, name, data):\n        response = requests.post(url=self.url + name, json=data, headers=self.headers, timeout=self.timeout)\n        # 获取返回内容\n        # 转码 utf-8、gbk、unicode-escape\n        response.encoding = 'unicode-escape'\n        text = response.text\n        # 获取返回code值\n        code = response.status_code\n        try:\n            # 将字符串转换为字典\n>           dict_text = json.loads(text)\n\ncommont\\configHttp.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\\n  \"http://www.w3.org/TR/html4/loose.dtd\">\\n<html>\\n  ...ller.py\", line 23, in login\\n    spwd = mysqlconnent.query(sql,args)[0]\\nIndexError: tuple index out of range\\n\\n-->\\n'\nencoding = None, cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n..\\..\\python3.7.4\\lib\\json\\__init__.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000243F35B2088>\ns = '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\\n  \"http://www.w3.org/TR/html4/loose.dtd\">\\n<html>\\n  ...ller.py\", line 23, in login\\n    spwd = mysqlconnent.query(sql,args)[0]\\nIndexError: tuple index out of range\\n\\n-->\\n'\n_w = <built-in method match of re.Pattern object at 0x00000243F3569570>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n..\\..\\python3.7.4\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000243F35B2088>\ns = '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\\n  \"http://www.w3.org/TR/html4/loose.dtd\">\\n<html>\\n  ...ller.py\", line 23, in login\\n    spwd = mysqlconnent.query(sql,args)[0]\\nIndexError: tuple index out of range\\n\\n-->\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\python3.7.4\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_login.TestLogin object at 0x00000243F41A6608>, params = {'password': '123456', 'username': 'ceshi'}\n\n    @allure.feature('异常登录')\n    @allure.story('错误的密码、用户进行登录')\n    @pytest.mark.parametrize('params', [(data['failpwd_params']), (data['failname_params'])], ids=['错误的密码', '错误的用户'])\n    def test_fail_login(self, params):\n        \"\"\"\n        1、错误的密码\n        2、错误的用户\n        :return:1\n        \"\"\"\n>       result = http.send_http(data['method'], data['url'], params)\n\ntestcases\\test_login.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommont\\configHttp.py:79: in send_http\n    result = self.send_post(name, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <commont.configHttp.HttpClient object at 0x00000243F3E29C08>, name = 'login', data = {'password': '123456', 'username': 'ceshi'}\n\n    def send_post(self, name, data):\n        response = requests.post(url=self.url + name, json=data, headers=self.headers, timeout=self.timeout)\n        # 获取返回内容\n        # 转码 utf-8、gbk、unicode-escape\n        response.encoding = 'unicode-escape'\n        text = response.text\n        # 获取返回code值\n        code = response.status_code\n        try:\n            # 将字符串转换为字典\n            dict_text = json.loads(text)\n            # 定义字典来保存数据\n            result = {\"text\": dict_text, \"code\": code}\n            # 打印日志\n            logger.info(\n                '{name} / post请求：\\n请求值：{request}\\n返回值：\\n{text}状态码：{code}'.format(name=name, request=data, text=text,\n                                                                                 code=code))\n        except:\n            logger.info(\n                '{name} / post请求：\\n请求值：{request}\\n返回值：\\n{text}状态码：{code}'.format(name=name, request=data, text=text,\n                                                                                 code=code))\n>           raise Exception('请求错误')\nE           Exception: 请求错误\n\ncommont\\configHttp.py:52: Exception"}, "description": "\n        1、错误的密码\n        2、错误的用户\n        :return:1\n        ", "attachments": [{"name": "log", "source": "c8955d7e-7310-4f17-8c0c-df7747ece964-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "params", "value": "{'username': 'ceshi', 'password': '123456'}"}], "start": 1647151852691, "stop": 1647151852794, "uuid": "72606ce4-0742-4072-b191-95c4b41348b7", "historyId": "ccc6faa35af0ab44a21cffdd53442399", "testCaseId": "87acfe5b98e3b3c095c7c4325dbf5b5b", "fullName": "testcases.test_login.TestLogin#test_fail_login", "labels": [{"name": "story", "value": "错误的密码、用户进行登录"}, {"name": "feature", "value": "异常登录"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "LAPTOP-L39EMF3A"}, {"name": "thread", "value": "11604-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_login"}]}